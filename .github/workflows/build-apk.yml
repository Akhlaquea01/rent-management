name: Build Android APK

on:
  push:
    branches: [ android, main, master ]
  pull_request:
    branches: [ android, main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Cordova
      run: npm install -g cordova
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: List files
      run: ls -la
    
    - name: Install dependencies
      run: |
        cd rent-management-mobile
        npm install
    
    - name: Add Android platform
      run: |
        cd rent-management-mobile
        cordova platform add android
        cordova platform list
    
    - name: Deploy custom WhitelistPlugin.java
      run: |
        cd rent-management-mobile
        # Create the whitelist directory if it doesn't exist
        mkdir -p platforms/android/app/src/main/java/org/apache/cordova/whitelist
        
        # Create our custom WhitelistPlugin.java file
        cat > platforms/android/app/src/main/java/org/apache/cordova/whitelist/WhitelistPlugin.java << 'EOF'
/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
*/

package org.apache.cordova.whitelist;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.ConfigXmlParser;
import org.apache.cordova.LOG;
import org.xmlpull.v1.XmlPullParser;

import android.content.Context;
import android.net.Uri;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class WhitelistPlugin extends CordovaPlugin {
    private static final String LOG_TAG = "WhitelistPlugin";
    
    // Simple URL pattern matching
    private ArrayList<String> allowedNavigations = new ArrayList<>();
    private ArrayList<String> allowedIntents = new ArrayList<>();
    private ArrayList<String> allowedRequests = new ArrayList<>();

    // Used when instantiated via reflection by PluginManager
    public WhitelistPlugin() {
    }
    
    // These can be used by embedders to allow Java-configuration of whitelists.
    public WhitelistPlugin(Context context) {
        new CustomConfigXmlParser().parse(context);
    }
    
    public WhitelistPlugin(XmlPullParser xmlParser) {
        new CustomConfigXmlParser().parse(xmlParser);
    }
    
    @Override
    public void pluginInitialize() {
        if (allowedNavigations.isEmpty()) {
            new CustomConfigXmlParser().parse(webView.getContext());
        }
    }

    private class CustomConfigXmlParser extends ConfigXmlParser {
        @Override
        public void handleStartTag(XmlPullParser xml) {
            String strNode = xml.getName();
            if (strNode.equals("content")) {
                String startPage = xml.getAttributeValue(null, "src");
                if (startPage != null) {
                    allowedNavigations.add(startPage);
                }
            } else if (strNode.equals("allow-navigation")) {
                String origin = xml.getAttributeValue(null, "href");
                if (origin != null) {
                    if ("*".equals(origin)) {
                        allowedNavigations.add("http://*/*");
                        allowedNavigations.add("https://*/*");
                        allowedNavigations.add("data:*");
                    } else {
                        allowedNavigations.add(origin);
                    }
                }
            } else if (strNode.equals("allow-intent")) {
                String origin = xml.getAttributeValue(null, "href");
                if (origin != null) {
                    allowedIntents.add(origin);
                }
            } else if (strNode.equals("access")) {
                String origin = xml.getAttributeValue(null, "origin");
                String subdomains = xml.getAttributeValue(null, "subdomains");
                boolean external = (xml.getAttributeValue(null, "launch-external") != null);
                if (origin != null) {
                    if (external) {
                        LOG.w(LOG_TAG, "Found <access launch-external> within config.xml. Please use <allow-intent> instead.");
                        allowedIntents.add(origin);
                    } else {
                        if ("*".equals(origin)) {
                            allowedRequests.add("http://*/*");
                            allowedRequests.add("https://*/*");
                        } else {
                            allowedRequests.add(origin);
                        }
                    }
                }
            }
        }
        
        @Override
        public void handleEndTag(XmlPullParser xml) {
        }
    }

    @Override
    public Boolean shouldAllowNavigation(String url) {
        if (isUrlAllowed(url, allowedNavigations)) {
            return true;
        }
        return null; // Default policy
    }

    @Override
    public Boolean shouldAllowRequest(String url) {
        if (Boolean.TRUE == shouldAllowNavigation(url)) {
            return true;
        }
        if (isUrlAllowed(url, allowedRequests)) {
            return true;
        }
        return null; // Default policy
    }

    @Override
    public Boolean shouldOpenExternalUrl(String url) {
        if (isUrlAllowed(url, allowedIntents)) {
            return true;
        }
        return null; // Default policy
    }
    
    private boolean isUrlAllowed(String url, ArrayList<String> allowedList) {
        if (allowedList.isEmpty()) {
            return true; // If no restrictions, allow all
        }
        
        for (String pattern : allowedList) {
            if (matchesPattern(url, pattern)) {
                return true;
            }
        }
        return false;
    }
    
    private boolean matchesPattern(String url, String pattern) {
        if ("*".equals(pattern)) {
            return true;
        }
        
        // Simple pattern matching
        if (pattern.contains("*")) {
            String regex = pattern.replace("*", ".*");
            return Pattern.matches(regex, url);
        }
        
        return url.equals(pattern);
    }
}
EOF
        echo "Custom WhitelistPlugin.java deployed successfully"
    
    - name: Verify configuration
      run: |
        cd rent-management-mobile
        echo "Checking config.xml for targetSdkVersion..."
        grep -n "android-targetSdkVersion" config.xml || echo "targetSdkVersion not found"
        echo "Checking if WhitelistPlugin.java exists..."
        if [ -f "platforms/android/app/src/main/java/org/apache/cordova/whitelist/WhitelistPlugin.java" ]; then
          echo "WhitelistPlugin.java found"
        else
          echo "WhitelistPlugin.java not found - this may cause build issues"
        fi
        echo "Configuration verified"
    
    - name: Build APK
      run: |
        cd rent-management-mobile
        echo "Starting Android build..."
        cordova build android --release
        echo "Build completed, looking for APK files..."
        find . -name "*.apk" -type f
        echo "APK search completed"
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: rent-management-apk
        path: rent-management-mobile/platforms/android/app/build/outputs/apk/release/app-release.apk
        if-no-files-found: warn
